
package binarysearch;

/**
 *
 * @author keeganjones
 
Given an array of integers nums which is sorted in ascending order, and an integer 
target, write a function to search target in nums. If target exists, then return 
its index. Otherwise, return -1.

You must write an algorithm with O(log n) runtime complexity.

Example 1:
Input: nums = [-1,0,3,5,9,12], target = 9
Output: 4
Explanation: 9 exists in nums and its index is 4

Example 2:
Input: nums = [-1,0,3,5,9,12], target = 2
Output: -1
Explanation: 2 does not exist in nums so return -1

Constraints:
1 <= nums.length <= 104
-104 < nums[i], target < 104
All the integers in nums are unique.
nums is sorted in ascending order.
 */


public class BinarySearch {

    public static int search(int[] nums, int target) {
        // declare some needed variables
        int pivot;
        int left = 0; 
        int right = nums.length - 1;
        
        while (left <= right) {
            // find the center of the acending ordered array, that is the pivot
            pivot = left + (right - left) / 2;
            
            // if the pivot point matches the target we are done, return pivot
            if (nums[pivot] == target) {
                System.out.println("Your target is found!");
                return pivot;
            } 
                
            // if the target value is smaller than the pivot - continue to search on the left.
            if (target < nums[pivot]) 
                // set the right to one less than the pivot to search to left
                right = pivot - 1;
            // if target value is larger than the pivot set left to one greater than pivot to
            // continue to search on the right of the pivot.
            else left = pivot + 1;
        }
    // if target does not exist in the array
    System.out.println("Your target is not found!");
    return -1;
    }
    
    public static void main(String[] args) {
        int[] nums = {3,9,14,27,32,54,68,77,81,92,98};
        int target = 77;
        
        search(nums, target);    
    }
}
